client:

- read in Hutcher about homology with coefficients

- complexes is based on a VR-complex, data can either be uploaded or obtained from a simulation
- results can be stored in client-side db and retrieved via link
- results (2 dim and 3 dim) can be displayed (triangulation)
  dim 0: point, 1: line, 2: triangle
  
- persistence homology + zigzag all which is in the tda-paper
- compare results with R, use this to run R from node and to provide standard
  way to implement algorithm which consumes R

- implement for knotes (fundamental group and read about)
- look into books of Edelbrunner and Kacinsky to get ideas

- make it what gimp is for pictures to be for data
  having result sets from simulation, algorithms, ... there 
  should exists a view which lets put together steps applied on data in
  a activity-diagram (drag&drop on the fly)
  
- a view which logs currently running tasks and which let interrupt them 
  
 - add mocha.js tests
   have followed this: https://brianstoner.com/blog/testing-in-nodejs-with-mocha/
   http://mochajs.org/#running-mochas-tests
  
 - 2d, 3d triangulation from data-sets: search for improved algorithm (Delenauy?) which produces nice# triangulations
  which are correctly embeddabe in 2d/3d, also how to triangulate knotes
  
- homology: based on given complex compute homology 

- implement the 'stop'-methods in Algorithm.js

- general aims: ability to add algorithms at runtime, implements system as npm-module
and create default-algorithm which can be extended and added as option to the system
  the same for simulations
- algorithm and simulation should be able to be implemented to run in separate app
  for instance C or R, write some examples for this
- simulate, analyse topology, learn parameter, save results, locally/server
  reuse results, portable, mobile, printable for papers
- source and result data can be uploaded to db from file, or on the fly via json,
  store on client, placing directly on server
- downloadable from db via stream to resp.
- all data always have JSON-format
- implement view to manager data sources

- simulations reqwrite in same manner as algorithms, make runnable in child-process or standalone
  and returning a Promise, use the same Mediator-pattern like for algorithms.

- simulation results can be save in client-side db and retrieved via links
- thus one can always proceed where one finished

- implement the application as node-module, then it can be used like so:
  require(the-system).config(port:  }.registerAlgorithms([...]).registerSimulations([....]).start();

try to use three.js + tjQuery to display 3-d simulations

- create algorithm for cubical complex 

The system could be used to test models very quickly and getting from the
data analysis basic characteristics automatically

implement automatic detection of bifurcation regions in parameter or changes in
topology and display in chart, ...

use topological data-anaylsis to analyse the simulation
read the appications in box 

One measure for the data analysis could be the Hausdorff distance between to simulations based on a set of 
start values and for different parameter.
The it is of interest if parameter-values have clusters which produce similar simulations (Hausdorff-distance is small 
between two in a cluster).

Data-analysis could be implemented in a separate R server which is invoked from node. And node serves the
simulated data to their via web-service.



